{{#section 'css'}}
<link rel="stylesheet" href="/public/css/admin/manage_order/list.css">
{{/section}}


<div class="container-fluid">
    <div class="row status_list">
        {{#each status_list}}
        <div class="col-3 mb-3">
            <div class="status_item">
                <div>
                    <div class="title">{{status_name}}</div>
                    <div class="count">{{count}}</div>
                </div>
                <div style="--color: {{color}};
                            border: none;
                            background-color: transparent !important;
                            color: var(--color);
                            font-weight: 500;
                        ;">

                    {{{icon}}}
                </div>
            </div>
        </div>
        {{/each}}
    </div>
    <hr>
    <div id="table-wrapper"></div>
</div>

{{#section 'js'}}
<script src="/node_modules/gridjs/dist/gridjs.umd.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/numeral.js/2.0.6/numeral.min.js"></script>
<script src="
https://cdn.jsdelivr.net/npm/moment@2.30.1/moment.min.js
"></script>

<script>

    function formatPrice(price) {
        return numeral(price).format('0,000') + ' VNĐ';  // Định dạng theo kiểu số VNĐ
    }

    function formatDate(date, format) {
        return moment(date).format('MMMM DD, YYYY, hh:mm a');  // Định dạng ngày theo format
    }


    // Lấy dữ liệu từ this.order đã chuyển sang JSON
    const orderData = {{{ json this.orders }}};

    // Chuyển đổi dữ liệu từ đối tượng thành mảng để sử dụng trong Grid.js
    const data = orderData.map(item => [item.order_id, item.created_at, item.full_name, item.total_selling,
    {
        status_name: item.status_name,
        color: item.color,
        icon: item.icon
    }]);

    // Khởi tạo bảng Grid.js
    new gridjs.Grid({
        columns: ["Order ID",
            // "createa at",
            {
                name: "Created At",
                formatter: (cell, row) => {
                    const datetime = formatDate(row.cells[1].data, 'asd');
                    return gridjs.html(`   
                            ${datetime}
                `);
                }
            },

            {
                name: "Customer",
                formatter: (cell, row) => {
                    return gridjs.html(`   
                        <div class="customer_name">
                            ${cell.toLocaleString()}
                        </div>
                `);
                }
            },

            {
                name: "Total",
                formatter: (cell) => {
                    let price;
                    try {
                        price = formatPrice(parseFloat(cell.toLocaleString()));
                    }
                    catch {
                        price = formatPrice(0);
                    }
                    return `${price}`
                },
                // Định dạng giá
                sort: {
                    compare: (a, b) => {
                        if (parseFloat(a) > parseFloat(b)) {
                            return 1;
                        } else if (parseFloat(b) > parseFloat(a)) {
                            return -1;
                        } else {
                            return 0;
                        }
                    },
                },
            },

            {
                name: "Order Status",
                formatter: (cell) => {
                    const { status_name, color, icon } = cell;
                    return gridjs.html(`   
                    <div class="btn" style="--color: ${color};
                            border: none;
                            background-color: transparent !important;
                            color: var(--color);
                            border: 1px solid var(--color);
                            font-weight: 500;
                        ;">
                        ${status_name}
                        ${icon}
                    </div>

                `);
                }
            },
            {
                name: "Action",
                formatter: (cell, row) => {
                    return gridjs.html(`
                        <a class= "btn btn-sm btn-primary btn_view_detail" href="/admin/order/detail?id=${row.cells[0].data}" role = "button">
                            Detail
                            <i class= "bi bi-eye ml-1" ></i>
                        </a>`);
                }
            }
        ],
        data: data,
        pagination: {
            limit: 5
        },
        search: true,
        sort: true,
        language: {
            search: {
                placeholder: 'Tìm kiếm...'
            },
            pagination: {
                previous: 'Trước',
                next: 'Sau',
                showing: 'Hiển thị',
                results: () => 'kết quả'
            }
        },
        style: {
            th: {
                background: 'linear-gradient(180deg, #eee 100%, #eee 100%'
            },

        }
    }).render(document.getElementById("table-wrapper"));

</script>
{{/section}}