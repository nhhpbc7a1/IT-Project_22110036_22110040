<div class="container-fluid">

    <!-- DataTales Example -->
    <div id="table-wrapper"></div>


</div>

{{#section 'css'}}
<style>
    .ellipsis {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 200px;
        /* Giới hạn chiều rộng tối đa */
    }
</style>
{{/section}}

{{#section 'js'}}
<script src="/node_modules/gridjs/dist/gridjs.umd.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/numeral.js/2.0.6/numeral.min.js"></script>
<script>

    function formatPrice(price) {
        return numeral(price).format('0,000') + ' VNĐ';  // Định dạng theo kiểu số VNĐ
    }

    // Lấy dữ liệu từ this.product đã chuyển sang JSON
    const productData = {{{ json this.products }}};

    // Chuyển đổi dữ liệu từ đối tượng thành mảng để sử dụng trong Grid.js
    const data = productData.map(item => [item.product_id, item.name, item.image_url, item.cost_price, item.selling_price, item.description,]);

    // Khởi tạo bảng Grid.js
    new gridjs.Grid({
        columns: ["ID", "Tên",
            {
                name: "Hình ảnh",
                formatter: (cell, row) => {
                    return gridjs.html(`                        
                        <img src="${row.cells[2].data}" class="img-thumbnail" alt="..." style="width: 100px; height: 100px;">
                        `);
                }
            },
            {
                name: "Giá gốc",
                formatter: (cell) => {
                    const price = formatPrice(parseFloat(cell.toLocaleString()));
                    return `${price}`
                },
                // Định dạng giá
                sort: {
                    compare: (a, b) => {
                        if (parseFloat(a) > parseFloat(b)) {
                            return 1;
                        } else if (parseFloat(b) > parseFloat(a)) {
                            return -1;
                        } else {
                            return 0;
                        }
                    },
                },
            },
            {
                name: "Giá bán",
                formatter: (cell) => {
                    const price = formatPrice(parseFloat(cell.toLocaleString()));
                    return `${price}`
                },
                sort: {
                    compare: (a, b) => {
                        if (parseFloat(a) > parseFloat(b)) {
                            return 1;
                        } else if (parseFloat(b) > parseFloat(a)) {
                            return -1;
                        } else {
                            return 0;
                        }
                    },
                },
            },
            {
                name: "Mô tả",
                formatter: (cell) => {
                    return gridjs.html(`
                        <div class="ellipsis">${cell}</div>
                        `);
                }
            },
            {
                name: "Hành động",
                formatter: (cell, row) => {
                    return gridjs.html(`                        
                        <a class="btn btn-sm btn-primary" href="/admin/product/edit?id=${row.cells[0].data}" role="button">
                            <i class="bi bi-pencil-square"></i>
                        </a>`);
                }
            }
        ],
        data: data,
        pagination: {
            limit: 5
        },
        search: true,
        sort: true,
        language: {
            search: {
                placeholder: 'Tìm kiếm...'
            },
            pagination: {
                previous: 'Trước',
                next: 'Sau',
                showing: 'Hiển thị',
                results: () => 'kết quả'
            }
        },
        style: {
            th: {
                background: 'linear-gradient(180deg, #eee 100%, #eee 100%'
            },

        }
    }).render(document.getElementById("table-wrapper"));

</script>
{{/section}}